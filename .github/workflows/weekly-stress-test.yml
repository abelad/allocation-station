name: Weekly Stress Testing

on:
  schedule:
    # Run every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:  # Allow manual triggering

jobs:
  stress-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run stress tests
      run: |
        pytest tests/test_performance.py::TestStressTests -v --tb=short

    - name: Run scalability tests
      run: |
        pytest tests/test_performance.py::TestScalability -v --tb=short

    - name: Run memory profiling
      run: |
        pip install memory_profiler
        python -m memory_profiler tests/test_performance.py::TestStressTests::test_memory_efficiency

    - name: Generate stress test report
      if: always()
      run: |
        echo "# Weekly Stress Test Report" > stress_report.md
        echo "Date: $(date)" >> stress_report.md
        echo "" >> stress_report.md
        pytest tests/test_performance.py -v --tb=short --junit-xml=stress_results.xml
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('stress_results.xml')
        root = tree.getroot()
        print(f'Total tests: {root.attrib.get(\"tests\", 0)}')
        print(f'Failures: {root.attrib.get(\"failures\", 0)}')
        print(f'Errors: {root.attrib.get(\"errors\", 0)}')
        print(f'Time: {root.attrib.get(\"time\", 0)}s')
        " >> stress_report.md

    - name: Upload stress test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: stress-test-report
        path: |
          stress_report.md
          stress_results.xml